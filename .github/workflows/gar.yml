name: "Google Artifact Registry"

on:
  workflow_run:
    workflows: ["Laravel"]
    types:
      - completed

jobs:
  deploy:
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      APP_DIR: ${{ secrets.APP_DIR }}
      SSL_CERT: ${{ secrets.SSL_CERT }}
      SSL_KEY: ${{ secrets.SSL_KEY }}
      FPM_IMAGE: ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GKE_CLUSTER }}/sureback-fpm_server
      WEBSERVER_IMAGE: ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GKE_CLUSTER }}/sureback-web_server
      CRON_IMAGE: ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GKE_CLUSTER }}/sureback-cron
      FRONTEND_IMAGE: ${{ secrets.GKE_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GKE_CLUSTER }}/sureback-frontend
    steps:
      - uses: actions/checkout@v3
      - name: "Create .env file"
        run: |
          echo APP_DIR='"${{ secrets.APP_DIR }}"' >> .env
          echo SSL_CERT='"${{ secrets.SSL_CERT }}"' >> .env
          echo SSL_KEY='"${{ secrets.SSL_KEY }}"' >> .env
      - name: "Create Google SA json"
        run: |
          mkdir -p storage/app/google
          echo "${{ secrets.GCP_CREDENTIALS }}" > storage/app/google/auth.json
      - name: "Build Docker Image"
        run: |
          docker-compose build
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: "Configure Docker to use the gcloud command-line tool as a credential helper"
        run: |-
          gcloud --quiet auth configure-docker ${{ secrets.GKE_REGION }}-docker.pkg.dev
      - name: "Push Docker Image"
        run: |
          docker push $FPM_IMAGE
          docker push $WEBSERVER_IMAGE
